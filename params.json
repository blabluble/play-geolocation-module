{"name":"Play Geolocation Module","tagline":"This is a play module for IP based geolocation","body":"# Play Geolocation Plugin\r\n\r\n[![Build Status](https://travis-ci.org/edulify/play-geolocation-module.edulify.com.svg)](https://travis-ci.org/edulify/play-geolocation-module.edulify.com)\r\n\r\nThis is a play module for IP based [Geolocation](https://en.wikipedia.org/wiki/Geolocation). Currently, the module supports the following services to retrieve the IP data:\r\n\r\n#### [Freegeoip](http://freegeoip.net/)\r\n\r\n> freegeoip.net provides a public HTTP API for software developers to search the geolocation of IP addresses. It uses a database of IP addresses that are associated to cities along with other relevant information like time zone, latitude and longitude.\r\n\r\n#### [Maxmind GeoIP2 Country](https://www.maxmind.com/en/country)\r\n\r\n> Determine an Internet visitor's country based on their IP address.\r\n\r\nHowever, support to other geolocation services is possible using the API provided by this plugin.\r\n\r\n## Compatibility Matrix\r\n\r\n| Playframework version | Module version |\r\n|:----------------------|:---------------|\r\n| 2.5.x                 | 2.1.0          |\r\n| 2.4.x                 | 2.0.0          |\r\n| 2.3.x                 | 1.4.1          |\r\n| 2.3.x                 | 1.4.0          |\r\n| 2.3.x                 | 1.3.0          |\r\n| 2.3.x                 | 1.2.0          |\r\n\r\n## How to use\r\n\r\nThe first step is include the the dependency in your `build.sbt` or `project/Build.scala` file:\r\n\r\n#### `build.sbt`\r\n\r\n```scala\r\nname := \"sitemapper-java-sample\"\r\n\r\nversion := \"1.0-SNAPSHOT\"\r\n\r\nlazy val root = (project in file(\".\")).enablePlugins(PlayJava)\r\n\r\nscalaVersion := \"2.11.7\"\r\n\r\nlibraryDependencies ++= Seq(\r\n  // Add your project dependencies here,\r\n  javaCore,\r\n  javaJdbc,\r\n  \"com.edulify\" %% \"geolocation\" % \"2.1.0\"\r\n)\r\n\r\nresolvers ++= Seq(\r\n  Resolver.url(\"Edulify Repository\", url(\"https://edulify.github.io/modules/releases/\"))(Resolver.ivyStylePatterns)\r\n)\r\n```\r\n\r\n#### `project/Build.scala`\r\n\r\n```scala\r\nimport sbt._\r\nimport Keys._\r\nimport play.Project._\r\n\r\nobject ApplicationBuild extends Build {\r\n\r\n  val appName         = \"geolocation-java-sample\"\r\n  val appVersion      = \"1.0-SNAPSHOT\"\r\n\r\n  val appDependencies = Seq(\r\n    // Add your project dependencies here,\r\n    javaCore,\r\n    javaJdbc,\r\n    \"com.edulify\" %% \"geolocation\" % \"2.1.0\"\r\n  )\r\n\r\n  val main = play.Project(appName, appVersion, appDependencies).settings(\r\n    // Add your own project settings here\r\n    resolvers += Resolver.url(\"Edulify Repository\", url(\"https://edulify.github.io/modules/releases/\"))(Resolver.ivyStylePatterns)\r\n  )\r\n\r\n}\r\n```\r\n\r\n#### Enable the module in your `conf/application.conf`:\r\n\r\nSince there is support to Freegeoip and Maxmind, there is also two modules that you enable, depending on which one you want to use. To eanble the module, just add the following line to you `conf/application.conf` file:\r\n\r\n```\r\nplay.modules.enabled += \"com.edulify.modules.geolocation.providers.FreegeoipModule\"\r\n```\r\n\r\nOr, in case you want to use Maxmind instead:\r\n\r\n```\r\nplay.modules.enabled += \"com.edulify.modules.geolocation.providers.MaxmindModule\"\r\n```\r\n\r\n## Configurations\r\n\r\nThis plugins offers the following configurations:\r\n\r\n| Configuration           | Description                             | Default           |\r\n|:------------------------|:----------------------------------------|:------------------|\r\n| `geolocation.cache.on`  | Caches geolocation results calls        | `false`           |\r\n| `geolocation.cache.ttl` | How long it should cache the results    | 5 seconds         |\r\n| `geolocation.enabled`   | If the plugin is enabled or not         | `true`            |\r\n| `geolocation.maxmind.license` | Maxmind license                   | none              |\r\n\r\nPer instance, you can add the following in your `conf/application.conf`:\r\n\r\n```\r\ngeolocation {\r\n  cache {\r\n    on = true\r\n    ttl = 10s\r\n  }\r\n  maxmind.license = \"your-maxmind-license\"\r\n}\r\n```\r\n\r\nAlso, notice that the cache uses the cache support offered by Playframework. A complete configuration can be found below:\r\n\r\n```\r\nplay.modules.enabled += \"com.edulify.modules.geolocation.providers.FreegeoipModule\"\r\n\r\ngeolocation {\r\n  cache {\r\n    on = true\r\n    ttl = 10s\r\n  }\r\n}\r\n```\r\n\r\n## Code example\r\n\r\nThis is the expected way to use the plugin.\r\n\r\n```java\r\nimport javax.inject.Inject;\r\n\r\nimport play.mvc.Result;\r\nimport play.mvc.Controller;\r\nimport play.libs.concurrent.HttpExecution;\r\n\r\nimport java.util.concurrent.CompletionStage;\r\n\r\nimport com.edulify.modules.geolocation.Geolocation;\r\nimport com.edulify.modules.geolocation.GeolocationService;\r\n\r\npublic class Application extends Controller {\r\n\r\n  private GeolocationService geolocationService;\r\n\r\n  @Inject\r\n  public Application(GeolocationService geolocationService) {\r\n    this.geolocationService = geolocationService;\r\n  }\r\n\r\n  public static CompletionStage<Result> index() {\r\n    ...\r\n    geolocationService.getGeolocation(request.remoteAddress())\r\n      .thenApplyAsync(new Function<Geolocation, Result>() {\r\n        ...\r\n      }, HttpExecution.defaultContext());\r\n  }\r\n}\r\n```\r\n\r\n## Implement your own geolocation service provider\r\n\r\nOut of the box, this plugins supports Freegeoip and Maxmind, but you can add your own geolocation service provider implementation and everything will works as expected. To do that, just create an implementation of `com.edulify.modules.geolocation.GeolocationProvider` and a [Play Module](https://www.playframework.com/documentation/2.4.x/Modules) to configure it:\r\n\r\n#### The `GeolocationProvider`:\r\n\r\n```java\r\npackage com.acme.geolocation;\r\n\r\nimport com.edulify.modules.geolocation.Geolocation;\r\nimport com.edulify.modules.geolocation.GeolocationProvider;\r\n\r\npublic class MyGeolocationProvider implements GeolocationProvider {\r\n\r\n    private WSClient ws;\r\n\r\n    @Inject\r\n    public MyGeolocationProvider(WSClient ws) {\r\n        this.ws = ws;\r\n    }\r\n\r\n    @Override\r\n    public CompletionStage<Geolocation> get(String ip) {\r\n        // Do a request to your geolocation service and\r\n        // then return a Promise with a geolocation object\r\n    }\r\n}\r\n```\r\n\r\n#### The Module:\r\n\r\n```java\r\npackage com.acme.geolocation;\r\n\r\nimport com.edulify.modules.geolocation.GeolocationProvider;\r\nimport com.google.inject.AbstractModule;\r\n\r\npublic class MyGeolocationModule extends AbstractModule {\r\n\r\n  @Override\r\n  protected void configure() {\r\n    // bind to your own MyGeolocationProvider implementation\r\n    bind(GeolocationProvider.class).to(MyGeolocationProvider.class);\r\n  }\r\n}\r\n\r\n```\r\n\r\nAfter that, you just have to configure the provider:\r\n\r\n```\r\n# Configure your own module here\r\nplay.modules.enabled += \"com.acme.geolocation.MyGeolocationModule\"\r\n\r\ngeolocation {\r\n  cache {\r\n    on = true\r\n    ttl = 10s\r\n  }\r\n}\r\n```\r\n\r\nThings like cache and timeouts will work seamless.\r\n\r\n## More plugins from [Edulify.com](https://edulify.com)\r\n\r\n1. [Sitemap Plugin](https://github.com/edulify/play-sitemap-module.edulify.com)\r\n2. [HikariCP Plugin](https://github.com/edulify/play-hikaricp.edulify.com)\r\n3. [Currency Plugin](https://github.com/edulify/play-currency-converter-module.edulify.com)\r\n\r\n## License\r\n\r\nCopyright 2014 Edulify.com\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}